#!/usr/bin/env bash
# Script to run shellcheck with all checks enabled against the checkpoint script
# Creates a comprehensive audit report for review

set -euo pipefail

# Define paths and constants
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CHECKPOINT_SCRIPT="${SCRIPT_DIR}/checkpoint"
REPORT_FILE="${SCRIPT_DIR}/shellcheck_audit_report.txt"
DATE=$(date "+%Y-%m-%d %H:%M:%S")

# Verify shellcheck is installed
if ! command -v shellcheck &> /dev/null; then
  echo "ERROR: shellcheck is not installed. Please install it first."
  echo "On Debian/Ubuntu: sudo apt-get install shellcheck"
  echo "On macOS: brew install shellcheck"
  exit 1
fi

# Create report header
cat > "$REPORT_FILE" << EOF
========================================================
  SHELLCHECK AUDIT REPORT FOR CHECKPOINT SCRIPT
  Date: $DATE
  Version: $(shellcheck --version | grep version | awk '{print $3}')
========================================================

EOF

# Get shellcheck version and capabilities information
echo "Gathering shellcheck version information..." >> "$REPORT_FILE"
shellcheck --version >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# List all enabled checks
echo "========================================================" >> "$REPORT_FILE"
echo "LIST OF ALL CHECKS BEING PERFORMED:" >> "$REPORT_FILE"
echo "========================================================" >> "$REPORT_FILE"
shellcheck -l >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Run shellcheck with all checks enabled
echo "========================================================" >> "$REPORT_FILE"
echo "SHELLCHECK RESULTS (ALL CHECKS ENABLED):" >> "$REPORT_FILE"
echo "========================================================" >> "$REPORT_FILE"
echo "Running shellcheck with all checks enabled (including warnings and info)..." >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Execute shellcheck with all checks enabled (--enable=all)
# Use --format=tty for colored output in terminals, fallback to standard output
if [ -t 1 ]; then
  # Terminal - use colored output
  shellcheck --enable=all --color=always "$CHECKPOINT_SCRIPT" >> "$REPORT_FILE" 2>&1 || true
else
  # Non-terminal - use standard output
  shellcheck --enable=all "$CHECKPOINT_SCRIPT" >> "$REPORT_FILE" 2>&1 || true
fi

# Count issues by severity
echo "" >> "$REPORT_FILE"
echo "========================================================" >> "$REPORT_FILE"
echo "ISSUES SUMMARY:" >> "$REPORT_FILE"
echo "========================================================" >> "$REPORT_FILE"

# Run again with JSON output to count issues by severity
ERRORS=$(shellcheck --enable=all --format=json "$CHECKPOINT_SCRIPT" 2>/dev/null | grep -c '"level":"error"' || echo 0)
WARNINGS=$(shellcheck --enable=all --format=json "$CHECKPOINT_SCRIPT" 2>/dev/null | grep -c '"level":"warning"' || echo 0)
INFO=$(shellcheck --enable=all --format=json "$CHECKPOINT_SCRIPT" 2>/dev/null | grep -c '"level":"info"' || echo 0)
STYLE=$(shellcheck --enable=all --format=json "$CHECKPOINT_SCRIPT" 2>/dev/null | grep -c '"level":"style"' || echo 0)
TOTAL=$((ERRORS + WARNINGS + INFO + STYLE))

echo "Error issues:   $ERRORS" >> "$REPORT_FILE" 
echo "Warning issues: $WARNINGS" >> "$REPORT_FILE"
echo "Info issues:    $INFO" >> "$REPORT_FILE"
echo "Style issues:   $STYLE" >> "$REPORT_FILE"
echo "TOTAL ISSUES:   $TOTAL" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Check for explicitly disabled checks in the script
echo "========================================================" >> "$REPORT_FILE"
echo "EXPLICITLY DISABLED CHECKS IN SCRIPT:" >> "$REPORT_FILE"
echo "========================================================" >> "$REPORT_FILE"
DISABLED=$(grep -o "shellcheck disable=[^ ]*" "$CHECKPOINT_SCRIPT" | sed 's/shellcheck disable=//')
if [ -n "$DISABLED" ]; then
  echo "The following shellcheck rules are explicitly disabled in the script:" >> "$REPORT_FILE"
  echo "$DISABLED" >> "$REPORT_FILE"
else
  echo "No shellcheck rules are explicitly disabled in the script." >> "$REPORT_FILE"
fi
echo "" >> "$REPORT_FILE"

# Add recommendations section
cat >> "$REPORT_FILE" << EOF
========================================================
  RECOMMENDATIONS FOR REMEDIATION
========================================================
1. Address error-level issues first as they represent serious problems
2. Review warning-level issues next as they could lead to bugs
3. Address info-level issues to improve script robustness
4. Consider style issues for better code readability and maintenance

This report can be used as part of a formal audit process to:
- Track overall script compliance with shell best practices
- Document current state before making changes
- Provide historical record of script quality

Report generated by audit_shellcheck.sh
EOF

# Make the report file readable
chmod 644 "$REPORT_FILE"

echo "Shellcheck audit completed. Report saved to: $REPORT_FILE"
echo "Issues found: $TOTAL (Error: $ERRORS, Warning: $WARNINGS, Info: $INFO, Style: $STYLE)"

exit 0
#fin